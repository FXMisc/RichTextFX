dependencies {
    compile project(":richtextfx")
}

jar {
    manifest {
        attributes(
            'Specification-Title': 'RichTextFX Demos',
            'Specification-Version': project.specificationVersion,
            'Implementation-Title': 'RichTextFX Demos',
            'Implementation-Version': project.version)
    }
}

task fatJar(type: Jar, dependsOn: classes) {
    appendix = 'fat'
    from sourceSets.main.output
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
}

assemble.dependsOn fatJar

task JavaKeywords(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.JavaKeywords'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task JavaKeywordsAsync(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.JavaKeywordsAsync'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task XMLEditor(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.XMLEditor'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task ManualHighlighting(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.ManualHighlighting'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task RichText(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.richtext.RichText'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task TextPositionTrackingDemo(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.locationtracking.TextPositionTrackingDemo'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task PopupDemo(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.PopupDemo'
    classpath = files(sourceSets.main.output, configurations.runtime)
}

task TooltipDemo(type: JavaExec, dependsOn: classes) {
    main = 'org.fxmisc.richtext.demo.TooltipDemo'
    classpath = files(sourceSets.main.output, configurations.runtime)
}
