/*
 * THIS CODE WAS AUTOGENERATED BY ANTLR4
 * You cannot modify generated code files. Do not attempt to make any changes to this file.
 *
 * checkout our wiki article on ANTLR for more details:
 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
 */

    package org.fxmisc.richtext.parser;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

/**
 * THIS CODE WAS AUTOGENERATED BY ANTLR4
 * You cannot modify generated code files. Do not attempt to make any changes to this file.
 *
 * checkout our wiki article on ANTLR for more details:
 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
 */
@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TestLangParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__5=1, T__4=2, T__3=3, T__2=4, T__1=5, T__0=6, DIRECT_TO_TOKEN=7, NONTERMINAL_TOKEN=8, 
		BRACKET_LABEL=9, LITERAL=10, SEMI_COLON=11, OPEN_PAREN=12, CLOSE_PAREN=13, 
		OPEN_CURLEY=14, CLOSE_CURLEY=15, LOWER_A=16, LOWER_B=17, LOWER_C=18, COMMENT=19, 
		LINEBREAKS=20;
	public static final String[] tokenNames = {
		"<INVALID>", "'/'", "'DIRECT_TO_TOKEN'", "'*'", "'NonterminalToken:'", 
		"'+'", "'-'", "'A'", "NONTERMINAL_TOKEN", "'BracketHell:'", "LITERAL", 
		"';'", "'('", "')'", "'{'", "'}'", "'a'", "'b'", "'c'", "COMMENT", "LINEBREAKS"
	};
	public static final int
		RULE_body = 0, RULE_sub_expr = 1, RULE_indirect_to_token = 2, RULE_bracket_hell = 3, 
		RULE_nonterminal_token = 4;
	public static final String[] ruleNames = {
		"body", "sub_expr", "indirect_to_token", "bracket_hell", "nonterminal_token"
	};

	@Override
	public String getGrammarFileName() { return "TestLang.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TestLangParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	/*
	 * THIS CODE WAS AUTOGENERATED BY ANTLR4
	 * You cannot modify generated code files. Do not attempt to make any changes to this file.
	 *
	 * checkout our wiki article on ANTLR for more details:
	 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
	 */
	public static class BodyContext extends ParserRuleContext {
		public Sub_exprContext sub_expr() {
			return getRuleContext(Sub_exprContext.class,0);
		}
		public Bracket_hellContext bracket_hell() {
			return getRuleContext(Bracket_hellContext.class,0);
		}
		public TerminalNode DIRECT_TO_TOKEN() { return getToken(TestLangParser.DIRECT_TO_TOKEN, 0); }
		public Indirect_to_tokenContext indirect_to_token() {
			return getRuleContext(Indirect_to_tokenContext.class,0);
		}
		public Nonterminal_tokenContext nonterminal_token() {
			return getRuleContext(Nonterminal_tokenContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_body);
		try {
			setState(22);
			switch (_input.LA(1)) {
			case DIRECT_TO_TOKEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(10); match(DIRECT_TO_TOKEN);
				setState(11); match(SEMI_COLON);
				}
				break;
			case T__4:
				enterOuterAlt(_localctx, 2);
				{
				setState(12); indirect_to_token();
				setState(13); match(SEMI_COLON);
				}
				break;
			case OPEN_CURLEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(15); match(OPEN_CURLEY);
				setState(16); sub_expr(0);
				setState(17); match(CLOSE_CURLEY);
				setState(18); match(SEMI_COLON);
				}
				break;
			case BRACKET_LABEL:
				enterOuterAlt(_localctx, 4);
				{
				setState(20); bracket_hell();
				}
				break;
			case T__2:
				enterOuterAlt(_localctx, 5);
				{
				setState(21); nonterminal_token();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/*
	 * THIS CODE WAS AUTOGENERATED BY ANTLR4
	 * You cannot modify generated code files. Do not attempt to make any changes to this file.
	 *
	 * checkout our wiki article on ANTLR for more details:
	 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
	 */
	public static class Sub_exprContext extends ParserRuleContext {
		public List<Sub_exprContext> sub_expr() {
			return getRuleContexts(Sub_exprContext.class);
		}
		public Sub_exprContext sub_expr(int i) {
			return getRuleContext(Sub_exprContext.class,i);
		}
		public TerminalNode LITERAL() { return getToken(TestLangParser.LITERAL, 0); }
		public Sub_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sub_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).enterSub_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).exitSub_expr(this);
		}
	}

	public final Sub_exprContext sub_expr() throws RecognitionException {
		return sub_expr(0);
	}

	private Sub_exprContext sub_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Sub_exprContext _localctx = new Sub_exprContext(_ctx, _parentState);
		Sub_exprContext _prevctx = _localctx;
		int _startState = 2;
		enterRecursionRule(_localctx, 2, RULE_sub_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(30);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				{
				setState(25); match(OPEN_PAREN);
				setState(26); sub_expr(0);
				setState(27); match(CLOSE_PAREN);
				}
				break;
			case LITERAL:
				{
				setState(29); match(LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(37);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Sub_exprContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_sub_expr);
					setState(32);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(33);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__3) | (1L << T__1) | (1L << T__0))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(34); sub_expr(3);
					}
					} 
				}
				setState(39);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	/*
	 * THIS CODE WAS AUTOGENERATED BY ANTLR4
	 * You cannot modify generated code files. Do not attempt to make any changes to this file.
	 *
	 * checkout our wiki article on ANTLR for more details:
	 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
	 */
	public static class Indirect_to_tokenContext extends ParserRuleContext {
		public Indirect_to_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirect_to_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).enterIndirect_to_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).exitIndirect_to_token(this);
		}
	}

	public final Indirect_to_tokenContext indirect_to_token() throws RecognitionException {
		Indirect_to_tokenContext _localctx = new Indirect_to_tokenContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_indirect_to_token);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(40); match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/*
	 * THIS CODE WAS AUTOGENERATED BY ANTLR4
	 * You cannot modify generated code files. Do not attempt to make any changes to this file.
	 *
	 * checkout our wiki article on ANTLR for more details:
	 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
	 */
	public static class Bracket_hellContext extends ParserRuleContext {
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(TestLangParser.CLOSE_PAREN, i);
		}
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(TestLangParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(TestLangParser.CLOSE_PAREN); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(TestLangParser.OPEN_PAREN); }
		public Bracket_hellContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_hell; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).enterBracket_hell(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).exitBracket_hell(this);
		}
	}

	public final Bracket_hellContext bracket_hell() throws RecognitionException {
		Bracket_hellContext _localctx = new Bracket_hellContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_bracket_hell);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(42); match(BRACKET_LABEL);
			setState(49);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OPEN_PAREN) {
				{
				{
				setState(43); match(OPEN_PAREN);
				setState(45);
				_la = _input.LA(1);
				if (_la==CLOSE_PAREN) {
					{
					setState(44); match(CLOSE_PAREN);
					}
				}

				}
				}
				setState(51);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(52); match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	/*
	 * THIS CODE WAS AUTOGENERATED BY ANTLR4
	 * You cannot modify generated code files. Do not attempt to make any changes to this file.
	 *
	 * checkout our wiki article on ANTLR for more details:
	 * https://github.com/EmpowerOperations/OASIS/wiki/ANTLR
	 */
	public static class Nonterminal_tokenContext extends ParserRuleContext {
		public TerminalNode NONTERMINAL_TOKEN() { return getToken(TestLangParser.NONTERMINAL_TOKEN, 0); }
		public Nonterminal_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonterminal_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).enterNonterminal_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TestLangListener ) ((TestLangListener)listener).exitNonterminal_token(this);
		}
	}

	public final Nonterminal_tokenContext nonterminal_token() throws RecognitionException {
		Nonterminal_tokenContext _localctx = new Nonterminal_tokenContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_nonterminal_token);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(54); match(T__2);
			setState(55); match(NONTERMINAL_TOKEN);
			setState(56); match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return sub_expr_sempred((Sub_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean sub_expr_sempred(Sub_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 2);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\26=\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\4\6\t\6\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\5\2\31\n\2\3\3\3\3\3\3\3\3\3\3\3\3\5\3!\n\3\3\3\3\3\3\3\7\3&\n\3"+
		"\f\3\16\3)\13\3\3\4\3\4\3\5\3\5\3\5\5\5\60\n\5\7\5\62\n\5\f\5\16\5\65"+
		"\13\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\2\3\4\7\2\4\6\b\n\2\3\5\2\3\3\5\5\7"+
		"\b?\2\30\3\2\2\2\4 \3\2\2\2\6*\3\2\2\2\b,\3\2\2\2\n8\3\2\2\2\f\r\7\t\2"+
		"\2\r\31\7\r\2\2\16\17\5\6\4\2\17\20\7\r\2\2\20\31\3\2\2\2\21\22\7\20\2"+
		"\2\22\23\5\4\3\2\23\24\7\21\2\2\24\25\7\r\2\2\25\31\3\2\2\2\26\31\5\b"+
		"\5\2\27\31\5\n\6\2\30\f\3\2\2\2\30\16\3\2\2\2\30\21\3\2\2\2\30\26\3\2"+
		"\2\2\30\27\3\2\2\2\31\3\3\2\2\2\32\33\b\3\1\2\33\34\7\16\2\2\34\35\5\4"+
		"\3\2\35\36\7\17\2\2\36!\3\2\2\2\37!\7\f\2\2 \32\3\2\2\2 \37\3\2\2\2!\'"+
		"\3\2\2\2\"#\f\4\2\2#$\t\2\2\2$&\5\4\3\5%\"\3\2\2\2&)\3\2\2\2\'%\3\2\2"+
		"\2\'(\3\2\2\2(\5\3\2\2\2)\'\3\2\2\2*+\7\4\2\2+\7\3\2\2\2,\63\7\13\2\2"+
		"-/\7\16\2\2.\60\7\17\2\2/.\3\2\2\2/\60\3\2\2\2\60\62\3\2\2\2\61-\3\2\2"+
		"\2\62\65\3\2\2\2\63\61\3\2\2\2\63\64\3\2\2\2\64\66\3\2\2\2\65\63\3\2\2"+
		"\2\66\67\7\r\2\2\67\t\3\2\2\289\7\6\2\29:\7\n\2\2:;\7\r\2\2;\13\3\2\2"+
		"\2\7\30 \'/\63";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}