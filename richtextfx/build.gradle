buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.3.2'
    }
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.unbroken-dome.test-sets'

group = 'org.fxmisc.richtext'

testSets {
    integrationTest { dirName = 'integrationTest' }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
    compile group: 'org.reactfx', name: 'reactfx', version: '2.0-M5'
    compile (group: 'org.fxmisc.undo', name: 'undofx', version: '1.3.1')
    compile (group: 'org.fxmisc.flowless', name: 'flowless', version: '0.6-SNAPSHOT')
    compile group: 'org.fxmisc.wellbehaved', name: 'wellbehavedfx', version: '0.3'

    testCompile group: 'junit', name: 'junit', version: '[4.0,5)'

    integrationTestCompile group: 'junit', name: 'junit', version: '[4.0,)'
    integrationTestCompile group: 'com.nitorcreations', name: 'junit-runners', version: '1.2'
    integrationTestCompile "org.testfx:testfx-core:4.0.6-alpha"
    integrationTestCompile ("org.testfx:testfx-junit:4.0.6-alpha") {
        exclude(group: "junit", module: "junit")
    }
    integrationTestCompile "org.testfx:openjfx-monocle:8u76-b04"
}


jar {
    manifest {
        attributes(
            'Specification-Title': 'RichTextFX',
            'Specification-Version': project.specificationVersion,
            'Implementation-Title': 'RichTextFX',
            'Implementation-Version': project.version)
    }
}

javadoc {
    // ignore missing Javadoc comments or tags
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
    options.addStringOption('encoding', 'UTF-8')

    // support for JavaFX properties
    options.addBooleanOption('javafx', true);

    options.links = [
        // resolve links to Java and JavaFX Javadocs
        'http://docs.oracle.com/javase/8/docs/api/',
        'http://docs.oracle.com/javase/8/javafx/api/',

        // resolve links to ReactFX
        'http://www.reactfx.org/javadoc/2.0-M5/',
            
        // resolve links to Flowless
        'https://fxmisc.github.io/flowless/javadoc/0.5/'
    ]
}

// use test logging.
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

test {
    testLogging {
        // Fancy formatting from http://stackoverflow.com/a/36130467/3634630
        // set options for log level LIFECYCLE
        events TestLogEvent.PASSED, TestLogEvent.SKIPPED,
                TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT
        showExceptions true
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED, TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED, TestLogEvent.FAILED,
                    TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
        }
        info.events = debug.events
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')
}

def doUploadArchives = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')

if(doUploadArchives) {
    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'RichTextFX'
                packaging 'jar'
                description 'Rich-text area for JavaFX'
                url 'http://www.fxmisc.org/richtext/'
           
                scm {
                    url 'scm:git@github.com:TomasMikula/RichTextFX.git'
                    connection 'scm:git@github.com:TomasMikula/RichTextFX.git'
                    developerConnection 'scm:git@github.com:TomasMikula/RichTextFX.git'
                }
           
                licenses {
                    license {
                        name 'The BSD 2-Clause License'
                        url 'http://opensource.org/licenses/BSD-2-Clause'
                        distribution 'repo'
                    }
                    license {
                        name 'GPLv2 with the Classpath Exception'
                        url 'http://www.gnu.org/software/classpath/license.html'
                        distribution 'repo'
                    }
                }
           
                developers {
                    developer {
                        name 'Tomas Mikula'
                    }
                }
            }
        }
    }
}

uploadArchives.onlyIf { doUploadArchives }

task fatJar(type: Jar, dependsOn: classes) {
    appendix = 'fat'
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

assemble.dependsOn fatJar
